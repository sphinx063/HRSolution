package strings;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;

public class Questions {
	public String pangram(String s){
		boolean[] alphabet =  new boolean[26];
		for(int i =0;i<alphabet.length;i++){
			alphabet[i] = false;
		}
		StringBuilder builder =new StringBuilder(s.replaceAll("\\s",""));
		System.out.println(builder.toString());
		if(builder.length()<26)
			return "not pangram";
		else{
			for(int i =0;i<builder.length();i++){
				if(builder.charAt(i)-97<0){
					alphabet[builder.charAt(i)-65] = true;
				}
				else{
					alphabet[builder.charAt(i)-97] = true;
				}
			}
		}
		boolean isPangram = true;
		for(int i =0;i<alphabet.length;i++){
			if(!alphabet[i]){
				isPangram = false;
				break;
			}
		}
		if(isPangram)
			return "pangram";
		else
			return "not pangram";
		
	}
	public void funnyString(){
		Scanner scanner = new Scanner(System.in);
		int T = scanner.nextInt();
		String[] strs = new String[T];
		int n =0;
		while(n<T){
			strs[n] = scanner.next();
			n++;
		}
		//String input = scanner.nextLine();
		for(int j =0;j<strs.length;j++){
		String s = strs[j];
		StringBuilder r = new StringBuilder(s);
		r.reverse();
		int p = 0;
		int q= 0;
		boolean isFunny = true;
		for(int i=1;i<s.length();i++){
			p = Math.abs(s.charAt(i)-s.charAt(i-1));
			q = Math.abs(r.charAt(i)-r.charAt(i-1));
			if(p!=q){
				isFunny = false;
				break;
			}
		}
		if(isFunny)
			System.out.println("Funny");
		else
			System.out.println("Not Funny");
		}
		scanner.close();
	}
	public static void StairCase(int n)
	{
		 for(int i=0;i<n;i++){
             for(int j=0;j<n-i-1;j++){
                 System.out.print(" ");
             } 
          for(int k= 0;k<i+1;k++){
        	  System.out.print("#");
          }
          if(i!=n-1){
          System.out.println();
          }
      }
	}
	public static int TrailingZeros(int N){
	
		int count=0;
		for(int i=5;N/i>=1;i=i*5){
			count+=N/i;
		}
		return count;
		
	}
	public static int countDuplicates(int[] numbers){
		int count=0;
		HashMap<Integer, Integer> map = new HashMap<Integer,Integer>();
		for(int i=0;i<numbers.length;i++){
			if(map.containsKey(numbers[i])){
				map.put(numbers[i],map.get(numbers[i])+1);
			}
			else{
				map.put(numbers[i],1);
			}
		}
		Iterator<Integer> keyIt = map.keySet().iterator();
		while(keyIt.hasNext()){
			if(map.get(keyIt.next())>=2){
				count++;
			}
		}
		return count;
	}
	public static int countDifferenceK(){
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		long[] inputArray = new long[N];
		for(int i=0;i<N;i++){
			inputArray[i]= sc.nextLong();
		}

		sc.close();
		int count = 0;
		Arrays.sort(inputArray);
		for(int i=0;i<N;i++){
			System.out.print(inputArray[i]+" ");
		}
		
		for(int i = 0;i<inputArray.length-1;i++){
			if((Arrays.binarySearch(inputArray,i+1,N,inputArray[i]+K))>0){
				count++;
			}
		}
		
		return count;
		
	}
	/*public static int numberOfTopics(){
		
		Scanner in =new Scanner(System.in);
		int N = in.nextInt();  
		int M=in.nextInt();
		long []input=new long[N];
		for(int i=0;i<M;i++){
		int firstIndex=in.nextInt();
		int secondIndex=in.nextInt();
		long K=in.nextLong();
		input[firstIndex]+=K;
		if((secondIndex+1)<=N) 
			input[secondIndex+1]-=K;
		}
		in.close();
		long max = 0;
        long x = 0;
    for(int i=1;i<=N;i++)
    {
       x=x+input[i];
       if(max<x) 
           max=x;

     }
		System.out.println(max); 
		
	}*/
	static LinkedList<Integer> queue = new LinkedList<Integer>();
	public static int friendCircle(String[] friends){
		String[] tempFriendArray = friends.clone();
        int friendCircleCount=0;
        for (int j=0;j<tempFriendArray.length;j++){
            if (tempFriendArray[j].contains("Y") ){
                friendCircleCount++;
                tempFriendArray[j] = processRow(tempFriendArray[j]);
                while (!queue.isEmpty()){
                    int head = queue.poll();
                    tempFriendArray[head] = processRow(tempFriendArray[head]);
                }
            }
        }
        return  friendCircleCount;
	}
	static String processRow(String row){
        Integer indexOfY;
        while((indexOfY=row.indexOf('Y')) != -1){
            queue.addLast(indexOfY);
            row = row.replaceFirst("Y","N");
        }
        return row;
    }
	static int equilibrium(int[] A){
		long sumRight=0;
		long sumLeft = 0;
		int equilibrium = -1;
		for(int i = 0;i<A.length;i++){
			sumRight+=A[i];
		}
		for(int i = 0;i<A.length;i++){
			long tempRight = sumRight-A[i];
			if(sumLeft == tempRight){
				equilibrium = i;
				break;
			}
			else{
				sumLeft+=A[i];
				sumRight = tempRight;
			}
		}
		return equilibrium;
	}
	 public static int frog(int X, int[] A,int D) {
	       /* int steps = X;
	        boolean[] bitmap = new boolean[steps+1];
	        for(int i = 0; i < A.length; i++){
	            if(!bitmap[A[i]]){
	                bitmap[A[i]] = true;
	                steps--;
	            }
	            if(steps == 0) return i;
	        }
	        return -1;*/
		 int[] positions = new int[X];
		 for(int i=0;i<X;i++)
			 positions[i] = 0;
		 	int currentPosition = 0;
		// b = Array.new(x) { 0 }
		// int leaves_sum = 0;
		 for(int i=0;i<A.length;i++){
			 if(positions[A[i]] == 0){
				 positions[A[i]]=1;
				 //leaves_sum+=1;
			 if(currentPosition<A[i] && currentPosition+D>=A[i]){
				 currentPosition=A[i];
				 if(X-currentPosition<=D){
					 return i;
				 }
					 
			 }
			}
			 //if(leaves_sum == X)
				// return i;
		 }
		 return -1;
		 /* a.each_with_index do |e, i|
		    begin
		      if b[e-1] == 0
		        b[e-1] = 1
		        leaves_sum += 1
		      end

		      if leaves_sum == x
		        return i
		      end
		    rescue
		      # for index out of range
		    end
		  end

		  return -1
*/
		 
	    }
	 int frogDynamic(int[] A, int X, int D){
		 for(int i=A.length-1;i>=0;i--){
			if(X-A[i]<D);
		 }
		 int F = 0;
		 int[] b = new int[X];
		 for(int i = 0;i<X;i++){
			 if(b[A[i]] == 0){
				 b[A[i]] = 1;
				 
			 }
		 }
		 return 0;
	 }
	 static  BigInteger fibonacci(){
		 Scanner s = new Scanner(System.in);
		 long A = s.nextLong();
		 long B = s.nextLong();
		 long N = s.nextLong();
		 s.close();
		 BigInteger T1 = BigInteger.valueOf(A);
		 BigInteger T2 = BigInteger.valueOf(B);
		 BigInteger T = BigInteger.ZERO;
		 for(int i=0;i<N-2;i++){
			 T = (T2.multiply(T2)).add(T1);
			 T1 = T2;
			 T2 = T;
		 }
		 return T;
	 }
	 static int[][] maximumSubarray(){
		Scanner s = new Scanner(System.in);
		int T = s.nextInt();
		int[][] results = new int[T][2];
		
		for(int i = 0;i<T;i++){
			s.nextLine();
			int N = s.nextInt();
			int[] A = new int[N];
			s.nextLine();
			for(int j = 0;j<N;j++){
				A[j] = s.nextInt();
			}
			int maxSum = A[0];
			System.out.println("$$$$$$$$$$  "+Integer.MIN_VALUE);
			int currentSum = A[0];
			int startIndex = -1;
			int endIndex = -1;
			int currentIndex = -1;
			int maxStart = -1;
			int maxEnd = -1;
			//System.out.println(maximumSum);
			//results[i] = maximumSum;
			for(int k =1;k<A.length;k++){
				if(currentSum+A[k]<=A[k]){
					System.out.println("k=  "+k);
					//if(k>0 && A[k]<0 && A[k-1]<0 && A[k]<A[k-1])
						//continue;
						currentSum = A[k];
						startIndex = k;
						endIndex = k;
					
				}
				else{
					/*if(currentSum<A[k]){
						currentSum = A[k];
						startIndex = k;
						endIndex = k;
					}*/
					currentSum +=A[k];
					endIndex = k;
				}
				if(currentSum>maxSum){
					maxSum = currentSum;
					maxStart = startIndex;
					maxEnd = endIndex;
				}
			}
			results[i][0] = maxSum;
			maxSum = 0;
			startIndex = -1;
			endIndex = -1;
			boolean isFirstPositive =  false;
			for(int k = 0;k<A.length;k++){
				if(A[k]>0 && !isFirstPositive){
					isFirstPositive =  true;
					startIndex = k;
				}
				if(A[k]>0){
					maxSum += A[k];
					endIndex = k;
				}
					
			}
			//System.out.println(maxStart+" "+ maxEnd);
			results[i][1] = maxSum;
				//System.out.println(A[k]);
			
		}
		s.close();
		return results;
	 }

}
